/* eslint-disable */
// prettier-ignore
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ContentObjectType = 'STRING' | 'FILE' | 'FOLDER';
export type ButtonVariant = 'PRIMARY' | 'SECONDARY' | 'DANGER';
export type SymbolPosition = 'p' | 's';
export type InputType = 'TEXT' | 'EMAIL' | 'PASSWORD' | 'NUMBER';
export type LayoutGridVariant = 'GRID2' | 'GRID4' | 'FREE';
export type LayoutJustifyContent = 'NORMAL' | 'END';
export type LayoutType = 'GRID' | 'FLEX';
export type OrientationType = 'horizontal' | 'vertical';
export type TextIconStyle = 'INLINE' | 'BLOCK';
export type TextType = 'RAW' | 'MARKDOWN';
export type Severity = 'INFO' | 'WARNING' | 'ERROR';

export interface Forms {
  compositeContext: CompositeContext;
  compositeInfo: CompositeInfo[];
  contentObject: ContentObject[];
  form: Form;
  formContext: FormContext;
  formEditorContent: FormEditorContent;
  formEditorData: FormEditorData;
  logicInfo: LogicInfo;
  parameterInfo: ParameterInfo[];
  string: string;
  variableInfo: VariableInfo;
  void: Void;
  [k: string]: unknown;
}
export interface FormContext {
  app: string;
  file: string;
  pmv: string;
}
export interface CompositeContext {
  compositeId: string;
  context: FormContext;
}
export interface CompositeInfo {
  id: string;
  startMethods: MethodInfo[];
}
export interface MethodInfo {
  deprecated: boolean;
  name: string;
  parameters: ParameterInfo[];
}
export interface ParameterInfo {
  description: string;
  name: string;
  type: string;
}
export interface ContentObject {
  children: ContentObject[];
  fullPath: string;
  name: string;
  type: ContentObjectType;
  values: MapStringString;
}
export interface MapStringString {
  [k: string]: string;
}
export interface Form {
  $schema: string;
  id: string;
  config: FormConfig;
  components: Component[];
}
export interface FormConfig {
  renderer: 'JSF';
  theme: string;
}
export interface Component {
  cid: string;
  type:
    | 'Button'
    | 'Checkbox'
    | 'Combobox'
    | 'Composite'
    | 'DataTable'
    | 'DatePicker'
    | 'Fieldset'
    | 'Input'
    | 'Layout'
    | 'Link'
    | 'Panel'
    | 'Radio'
    | 'Select'
    | 'Text'
    | 'Textarea';
  config:
    | Button
    | Checkbox
    | Combobox
    | Composite
    | DataTable
    | DatePicker
    | Fieldset
    | Input
    | Layout
    | Link
    | Panel
    | Radio
    | Select
    | Text
    | Textarea;
}
export interface Button {
  action: string;
  disabled: string;
  icon: string;
  id: string;
  lgSpan: string;
  mdSpan: string;
  name: string;
  processOnlySelf: boolean;
  variant: ButtonVariant;
  visible: string;
}
export interface Checkbox {
  disabled: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  selected: string;
  updateOnChange: boolean;
  visible: string;
}
export interface Combobox {
  completeMethod: string;
  disabled: string;
  id: string;
  itemLabel: string;
  itemValue: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: string;
  requiredMessage: string;
  updateOnChange: boolean;
  value: string;
  visible: string;
  withDropdown: boolean;
}
export interface Composite {
  id: string;
  lgSpan: string;
  mdSpan: string;
  name: string;
  parameters: MapStringString;
  startMethod: string;
}
export interface DataTable {
  components: DataTableColumn[];
  id: string;
  lgSpan: string;
  maxRows: string;
  mdSpan: string;
  paginator: boolean;
  value: string;
  visible: string;
}
export interface DataTableColumn {
  cid: string;
  config: DataTableColumnConfig;
}
export interface DataTableColumnConfig {
  filterable: boolean;
  header: string;
  sortable: boolean;
  value: string;
  visible: string;
}
export interface DatePicker {
  datePattern: string;
  disabled: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: string;
  requiredMessage: string;
  showTime: boolean;
  timePattern: string;
  updateOnChange: boolean;
  value: string;
  visible: string;
}
export interface Fieldset {
  collapsed: boolean;
  collapsible: boolean;
  components: Component[];
  id: string;
  legend: string;
  lgSpan: string;
  mdSpan: string;
  visible: string;
}
export interface Input {
  decimalPlaces: string;
  disabled: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: string;
  requiredMessage: string;
  symbol: string;
  symbolPosition: SymbolPosition;
  type: InputType;
  updateOnChange: boolean;
  value: string;
  visible: string;
}
export interface Layout {
  components: Component[];
  gridVariant: LayoutGridVariant;
  id: string;
  justifyContent: LayoutJustifyContent;
  lgSpan: string;
  mdSpan: string;
  type: LayoutType;
  visible: string;
}
export interface Link {
  href: string;
  id: string;
  lgSpan: string;
  mdSpan: string;
  name: string;
  visible: string;
}
export interface Panel {
  collapsed: boolean;
  collapsible: boolean;
  components: Component[];
  id: string;
  lgSpan: string;
  mdSpan: string;
  title: string;
  visible: string;
}
export interface Radio {
  disabled: string;
  dynamicItemsLabel: string;
  dynamicItemsList: string;
  dynamicItemsValue: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  orientation: OrientationType;
  required: string;
  requiredMessage: string;
  staticItems: SelectItem[];
  updateOnChange: boolean;
  value: string;
  visible: string;
}
export interface SelectItem {
  label: string;
  value: string;
}
export interface Select {
  disabled: string;
  dynamicItemsLabel: string;
  dynamicItemsList: string;
  dynamicItemsValue: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: string;
  requiredMessage: string;
  staticItems: SelectItem[];
  updateOnChange: boolean;
  value: string;
  visible: string;
}
export interface Text {
  content: string;
  icon: string;
  iconStyle: TextIconStyle;
  id: string;
  lgSpan: string;
  mdSpan: string;
  type: TextType;
  visible: string;
}
export interface Textarea {
  autoResize: boolean;
  disabled: string;
  id: string;
  label: string;
  lgSpan: string;
  mdSpan: string;
  required: string;
  requiredMessage: string;
  rows: string;
  updateOnChange: boolean;
  value: string;
  visible: string;
}
export interface FormActionArgs {
  actionId: 'openDataClass' | 'openProcess' | 'openUrl';
  context: FormContext;
  payload: string;
}
export interface FormEditorContent {
  content: string;
}
export interface FormEditorData {
  context: FormContext;
  data: Form;
  defaults: DefaultConfig;
  helpUrl: string;
  readonly: boolean;
}
export interface DefaultConfig {}
export interface LogicInfo {
  eventStarts: LogicEventInfo[];
  startMethods: LogicMethodInfo[];
}
export interface LogicEventInfo {
  description: string;
  name: string;
}
export interface LogicMethodInfo {
  description: string;
  name: string;
  parameters: Parameter[];
  returnParameter: Parameter;
}
export interface Parameter {
  name: string;
  type: string;
}
export interface ValidationResult {
  message: string;
  path: string;
  severity: Severity;
}
export interface VariableInfo {
  types: MapStringListVariable;
  variables: Variable[];
}
export interface MapStringListVariable {
  [k: string]: Variable[];
}
export interface Variable {
  attribute: string;
  description: string;
  simpleType: string;
  type: string;
}
export interface Void {}
